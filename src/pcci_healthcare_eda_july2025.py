# -*- coding: utf-8 -*-
"""PCCI HEALTHCARE-EDA-JULY2025

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L6jrtaC2vjO7glJmm7FxVjLX3WbXNnxE

##**PCCI DATA SET EXPLORATORY DATA ANALISYS**
#dataset
"""

# Code snippet 1
# Setting the dataset URL
url = 'https://raw.githubusercontent.com/nvamsimohan/DallasDSA/main/PCCI%20Cases%20Readmit30%20Data.csv'


# Display the URL
url

# Code snippet 2
# Importing pandas for data processing
import pandas as pd

# Code snippet 3
# Importing the dataset from the URL
data  = pd.read_csv(url)


# Display the data
data

# Code snippet 4
# Displaying dataset columns
data.columns

"""#Statisticals Analisys"""

# Code snippet 5
# Displaying the descriptive stats
data.describe()

"""#Feature Engineering"""

# Code snippet 6
# Importing missingno package to display the missing data proportion
import missingno as msno

# Code snippet 6.5
# Dropping  'Temperature' beacuse of missing more than 20% data
data = data.drop(['Temperature'], axis=1)


data.columns

# Code snippet6.
# Displaying dataset columns
data.dtypes

# Code snippet 7
# Displaying the missing proportion data
msno.bar(data)

"""#Exploratory Data Analysis Report"""

# Code snippet 8
# Installing ydata profiling package for detailed data profiling (Exploratory Data Analysis, EDA)
!pip install -U ydata-profiling

# Code snippet 9
# Importing ProfileReport for detailed EDA/data profiling
from ydata_profiling import ProfileReport

# Code snippet 10
# Generating detailed profile report for the predictors data
profile = ProfileReport(data)


# Converting profile to an interactive HTML report
profile.to_file("PCCI DATA - July 2025.html")

"""#Correlation Analisys"""

# Code snippet 11
# Installing Dython for statistical correlations and significance tests
!pip install dython

# Code snippet 12
# Importing relevant stats modules
from dython.nominal import associations

# Code snippet 13
# Setting Zip as a string variable
data['Readmit30'] = data['Readmit30'].astype(str)


# Running the associations function on the predictors
assoc = associations(data)

# Code snippet 14
# Storing the correlations in a matrix
assoc_matrix = assoc['corr']

# Code snippet 15
# Setting the target variable
target = 'Readmit30'


# List the associated variables in the descending order of influence on the target variable
assoc_matrix[target].abs().sort_values(ascending=False)

"""#Visual Interactive Charts"""

# Code snippet 16
# Installing AutoViz package for auto visualizations
!pip install autoviz

# Code snippet 17
# Importing Autoviz modules
from autoviz.AutoViz_Class import AutoViz_Class


# Starting the Autoviz instance
AV = AutoViz_Class()




# Code snippet 23
# Generating visuals using AutoViz modules
AV.AutoViz(data, verbose = 2, depVar= 'Readmit30')